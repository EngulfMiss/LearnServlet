        * Jsoup快速入门：
            * 步骤
                1.导入jar包
                2.获取Document对象
                3.获取对应的标签Element对象
                4.获取数据

            演示代码：
                    public static void main(String[] args) throws IOException {
                        //获取Document对象
                        //根据一个xml文档来获取,获取xml文档的path路径
                        String path = JsoupDemo1.class.getClassLoader().getResource("student.xml").getPath();
                        //解析xml文档，加载文档进内存，获取dom树-->Document
                        Document document = Jsoup.parse(new File(path), "utf-8");
                        //获取元素对象 Element
                        Elements names = document.getElementsByTag("姓名");
                        System.out.println(names.size());
                        //获取第一个姓名的Element对象
                        Element element = names.get(0);
                        //获取数据
                        String name = element.text();
                        System.out.println(name);


                    }


            * 对象的使用：
                1.Jsoup：工具类，可以解析html或xml文档，返回Document对象
                    * parse：解析html或xml文档，返回Document对象
                        * 重要的一些重载形式
                        parse(File in,String charsetName) : 解析xml或html文件的
                        parse(String html) ：解析xml或html字符串
                        parse(URL url,int timeoutMillis) : 通过网络路径获取指定的html或xml文档对象


                2.Document：文档对象，代表内存中的dom树
                    * 获取Element对象
                        * getElementsByTag(String tagName) : 根据标签名称获取元素对象集合
                        * getElementsByAttribute(String key) : 根据属性名称获取元素对象集合
                        * getElementsByAttribute(String key,String value) : 根据属性名称和属性值获取元素对象集合
                        * getElementById(String id) : 根据id属性值获取唯一的Element对象

                3.Elements：元素Element对象的集合。可以当做ArrayList<Element>来使用


                4.Element：元素对象
                    1.获取子元素对象
                        * getElementsByTag(String tagName) : 根据标签名称获取元素对象集合
                        * getElementsByAttribute(String key) : 根据属性名称获取元素对象集合
                        * getElementsByAttribute(String key,String value) : 根据属性名称和属性值获取元素对象集合
                        * getElementById(String id) : 根据id属性值获取唯一的Element对象

                    2.获取属性值
                        * String attr(String key) : 根据属性名称获取属性值
                    3.获取文本内容
                        * String text():获取文本内容
                        * String html():获取标签体的所有内容(包括子标签的字符串内容)



                5.Node：节点对象
                    * 是Document和Element父类


        * 快捷的查询方式：
            1.selector:选择器
                Elements select(String cssQuery)
                * 语法：参考Selector类中定义的语法



            2.XPath:
                XPath即为XML路径语言，它是一种用来确定XML(标准通用标记语言的子集)文档中某部分位置
                的语言
                * 使用XPath要额外导入jar包
                * 查询w3school参考手册


------------------------------------------------------------------------------------------

web相关概念回顾
    1.软件架构
        1.C/S：客户端/服务器端
        2.B/S：浏览器/服务器端


    2.资源分类
        1.静态资源：所有用户访问后，得到的结果都是一样的，称为静态资源。可以直接被浏览器解析
            如：html，css，javascript

        2.动态资源：每个用户访问相同的资源后，得到的结果可能不一样，称为动态资源。需先转换为静态
        资源，再返回给浏览器.
            如：servlet/jsp，php，asp...

    3.网络通信三要素
        1.IP：电子设备在网络中的唯一标识
        2.端口：应用程序在计算机中的唯一标识. 0~65535
        3.传输协议：规定了数据传输的规则
            1.基础协议
                - TCP：安全协议，三次握手
                - UDP：不安全协议，速度快


web服务器软件：
    * 服务器：安装了服务器软件的计算机
    * 服务器软件：接收用户请求，处理请求，做出响应
    * web服务器软件：接收用户请求，处理请求，做出响应
        * 在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目
        * web容器


    * 常见的java相关的web服务器软件
        * webLogic：oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的
        * webSphere：IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的
        * JBOSS：JBOSS公司的，大型的JavaEE服务器，支持所有的JavaEE规范，收费的
        * Tomcat：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范


    * JavaEE：java语言在企业级开发中的技术规范总和，一共规定了13项大的规范


    * Tomcat：web服务器软件
        1.下载：http://tomcat.apache.org/
        2.安装:解压压缩包
            * 注意：安装目录不要有中文和空格

        3.卸载
        4.启动
            * bin/startup.bat
            * 访问：http://localhost:8080

            * 可能遇到的问题：
                1.黑窗口一闪而过：
                    * 原因：没有正确配置JAVA_HOME环境变量
                    * 解决方案：正确配置JAVA_HOME

                2.启动报错:
                    1.暴力:找到占用的端口号，找到对应的进程，终结该进程
                    2.温柔:修改自己的端口号
                        conf/server.xml

        5.关闭
            1.正常关闭
                * bin/shutdown.bat
                * ctrl + c
            2.强制关闭
                点击启动窗口的X


        6.配置
            * 部署项目的方式：
                1.直接将项目放到webapps目录
                * 简化部署：将项目简化为一个war包，再将war包放置到webapps目录下
                    * war包会自动解压


                2.配置conf/server.xml文件
                在<Host>标签体中配置
                <Context docBase="项目位置" path="/(hehe)虚拟目录" />
                * docBase：项目存放的路径
                * path：虚拟目录

                3.在conf\Catalina\localhost创建任意名称的xml文件，在文件中编写
                <Context docBase="项目位置" />
                * 虚拟目录:xml文件的名称


            * 静态项目和动态项目
                * 目录结构
                    * java动态项目的目录结构：
                    -- 项目的根目录
                        -- WEB-INF目录：
                            -- web.xml:web项目的核心配置文件
                            -- classes 目录：放置字节码文件的目录
                            -- lib 目录：放置依赖jar包


            将Tomcat集成到IDEA中


------------------------------------------------------------------------------------

#Servlet： server applet
    * 概念：运行在服务器端的小程序
        * Servlet就是一个接口，定义了java类被浏览器访问到(tomcat识别)的规则
        * 将来我们自定义一个类，实现Servlet接口，复写方法


    * 快速入门：
        1.创建JAVAEE项目
        2.定义一个类，实现Servlet接口
            public class ServletDemo1 implements Servlet

        3.实现接口中的抽象方法
        4.配置Servlet
            * 在web.xml中配置servlet
            <!-- 配置Servlet -->
            <servlet>
                <servlet-name>Demo1</servlet-name>
                <servlet-class>web.servlet.ServletDemo1</servlet-class>
            </servlet>

            <servlet-mapping>
                <servlet-name>Demo1</servlet-name>
                <url-pattern>/path1</url-pattern>
            </servlet-mapping>


    * 执行原理：
        1.当服务器接收到客户端浏览器的请求后，会解析请求的URL路径，获取访问的Servlet的资源路径
        2.查找web.xml文件，是否有对应的<url-pattern>标签体内容与资源路径一致
        3.如果有，则找到对应的<servlet-name>,通过映射找到对应的<servlet-class>全类名
        4.Tomcat会将字节码文件加载进内存，创建其对象
        5.调用其方法



    * Servlet中的生命周期：
        1.被创建：执行init方法，只执行一次
            * servlet什么时候被创建?
                * 默认情况下，第一次被访问时，Servlet被创建
                * 可以配置执行Servlet的创建时机
                在servlet标签体中
                1.第一次被访问时，创建
                    * <load-on-startup>的值为负数
                2.在服务器启动时，创建
                    * <load-on-startup>的值为0或正整数


            * Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的
                * 多个用户同时访问时，可能存在线程安全问题
                * 解决：尽量不要在Servlet中定义成员变量，即使定义了成员变量，也不要对其修改




        2.提供服务：执行service方法，执行多次
            * 每次访问Servlet时，Servlet方法都会被调用一次


        3.被销毁：执行destroy，只执行一次
            * Servlet被销毁时执行。服务器正常关闭时，Servlet被销毁
            * destroy方法在Servlet被销毁之前执行，一般用于释放资源





     * Servlet中的方法
        - init
        - getServletConfig
        - service
        - getServletInfo
        - destroy



    * Servlet3.0：
        * 好处：
            * 支持注解配置.可以不需要web.xml了

        * 步骤：
            1.创建JavaEE项目，选择Servlet的版本3.0以上，可以不创建web.xml
            2.定义一个类，实现Servlet接口
            3.复写方法
            4.在类上使用@WebServlet注解，进行配置
            @WebServlet("资源路径")



## IDEA与tomcat的相关配置
断点调试，打断点，点小虫子启动



------------------------------------------------------------------------------------------

## Servlet：
1.概念
2.步骤
3.执行原理
4.生命周期
5.servlet3.0 注解配置
6.servlet的体系结构
    Servlet -- 接口

    GenericServlet -- 抽象类
        * GenericServlet:将Servlet接口中其他的方法做了默认空实现，只将service()方法做了抽象
        将来定义Servlet类时，可以继承GenericServlet，实现service()方法即可


    HttpServlet -- 抽象类
        * HttpServlet:对http协议的一种封装
            1.定义类继承HttpServlet
            2.复写doGet/doPost方法


7.Servlet相关配置
    1.urlpartten:Servlet访问路径
        * 一个Servlet可以定义多个访问路径：@WebServlet({"/path4","/demo4","/p4"})
        * 路径定义规则：
            1./XXX
            2./XXX/XXX  : 多层路径/目录结构
            3.*.do






# HTTP：
    概念：Hyper Text Transfer Protocol 超文本传输协议
    * 传输协议：定义了，客户端和服务器端通信时，发送数据的格式
    * 特点：
        1.基于TCP/IP的高级协议
        2.默认端口号：80
        3.基于请求/响应模型的，一次请求对应一次响应
        4.无状态的：每次请求之间相互独立，不能交互数据



    * 请求消息数据格式
        1.请求行
            请求方式 请求url 请求协议/版本
            GET /login.html HTTP/1.1

            请求方式：
                HTTP协议有7种请求方式,常用2种
                * GET:
                    1.请求参数在请求行中，url后
                    2.请求的url长度有限制的
                    3.不太安全

                * POST
                    1.请求参数在请求体中
                    2.请求的url长度是没有限制的
                    3.相对安全


        2.请求头：客户端浏览器告诉服务器一些信息
            请求头名称：请求头值
                User-Agent ：浏览器告诉服务器，我访问你使用的浏览器版本信息
                    * 可以在服务器端获取该头的信息，解决浏览器兼容问题

                Referer ：告诉服务器，我(当前请求)从哪里来?
                    * 作用：
                        1.防盗链：
                        2.统计工作

        3.请求空行
            空行，用于分隔POST请求头和请求体的

        4.请求体(正文)
            * 封装POST请求消息的请求参数的


        例如：
        字符串格式：
        POST /login.html HTTP/1.1
        Host: localhost:8080
        User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:76.0) Gecko/20100101 Firefox/76.0
        Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
        Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
        Accept-Encoding: gzip, deflate
        Connection: keep-alive
        Cookie: Idea-7543ef28=a7b49c1c-b360-453a-ae2a-871abb8c0c16; Idea-9cbcf82d=60c64c7a-eeec-41c3-ba9b-9cf15fbb61cb
        Upgrade-Insecure-Requests: 1
        If-Modified-Since: Fri, 15 May 2020 23:14:59 GMT
        If-None-Match: W/"282-1589584499650"
        Cache-Control: max-age=0

        username=zhangsan




#Request和Response
    1.request对象和response对象的原理
        - request和response对象是由服务器创建的，我们来使用它们
        - request对象来获取请求消息，response对象来设置响应消息

    2.request对象继承体系结构：
        - ServletRequest -- 接口
                |  继承
        - HttpServletRequest -- 接口
                |  实现
         org.apache.catalina.connector.RequestFacade 类(tomcat)


    3.request功能：
        1.获取请求消息数据
            1.获取请求行数据
            * GET /login.html HTTP/1.1
            *方法：
                1.获取请求方式：GET
                    * String getMethod()

                (!)2.获取虚拟目录：/Zujie_war_exploded
                    * String getContextPath()

                3.获取Servlet路径：/RequestDemo1
                    * String getServletPath()

                4.获取get方式的请求参数：name=Gnar
                    * String getQueryString()

                (!)5.获取请求的URI ：虚拟目录+Servlet路径
                    * String getRequestURI()
                    * StringBuffer getRequestURL()
                     例 : URI:/Zujie_war_exploded/RequestDemo1
                          URL:http://192.168.101.38:8080/Zujie_war_exploded/RequestDemo1

                     - URL：统一资源定位符
                     - URI：统一资源标识符


                6.获取协议和版本：HTTP/1.1
                    * String getProtocol()

                7.获取客户机的IP地址：192.168.101.23
                    * String getRemoteAddr()


            2.获取请求头数据
                * 方法：
                    * String getHeader(String name):通过请求头的名称获取请求头的值
                    * Enumeration<String> getHeaderNames():获取所有的请求头名称


            3.获取请求体数据
                * 请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数
                * 步骤：
                    1.获取流对象
                        * BufferedReader getReader() : 获取字符输入流，只能操作字符数据
                        * ServletInputStream getInputStream() : 获取字节输入流，可以操作所有类型数据

                    2.再从流对象中拿数据

        2.其他
            1.获取请求参数，通用的方式
                不论get还是post请求方式都可以使用下列方法来获取请求参数
                1.String getParameter(String name):根据参数名称获取参数值
                    username=gnar&password=123

                2.String[] getParameterValues(String name):根据参数名称获取参数值的数组
                    hobby=xx&hobby=xx

                3.Enumeration<String> getParamterNames():获取所有请求的参数名称

                4.Map<String,String[]> getParameterMap():获取所有参数的map集合

                *中文乱码问题：
                    * get方式：tomcat 8 已经将get方式乱码问题解决了
                    * post方式：会乱码
                        - 解决：
                        在获取参数前，设置request的编码
                        request.setCharacterEncoding("utf-8");


            2.请求转发：
                1.步骤
                    1.通过request对象获取请求转发器对象
                    RequestDispatcher getRequestDispatcher(String path)
                    2.使用RequestDispatcher对象进行转发：forward(ServletRequest request,ServletResponse response)

                2.特点：
                    1.浏览器地址栏路径没有发生变化
                    2.只能转发到当前服务器内部的资源中
                    3.转发是一次请求



            3.共享数据：
                * 域对象：一个有作用范围的对象，可以在范围内共享数据
                * request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据
                    方法：
                        - void setAttribute(String name,Object obj):存储数据
                        - Object getAttribute(String name):通过键获取值
                        - void removeAttribute(String name):通过键移除键值对




            4.获取ServletContext:
                - ServletContext getServletContext()



    案例：用户登录(在LoginTest项目中)
        需求；
            1.编写login.html登录页面
            2.使用 Druid数据库连接池，操作mysql
            3.使用jdbcTemplate技术封装JDBC
            4.成功or失败


        步骤：
            1.创建项目，编写html页面，配置文件，jar包
            2.创建数据库环境
            CREATE TABLE USER(
            	id INT PRIMARY KEY AUTO_INCREMENT,
            	username VARCHAR(20) UNIQUE NOT NULL,
            	PASSWORD VARCHAR(20) NOT NULL
            );

            3.创建一个包Engulf.domain ,创建一个类User
            public class User {
                private int id;
                private String username;
                private String password;

                public int getId() {
                    return id;
                }

                public void setId(int id) {
                    this.id = id;
                }

                public String getUsername() {
                    return username;
                }

                public void setUsername(String username) {
                    this.username = username;
                }

                public String getPassword() {
                    return password;
                }

                public void setPassword(String password) {
                    this.password = password;
                }

                @Override
                public String toString() {
                    return "User{" +
                            "id=" + id +
                            ", username='" + username + '\'' +
                            ", password='" + password + '\'' +
                            '}';
                }
            }


            4.创建一个包Engulf.dao,创建类UserDao,提供login方法


            5.编写Engulf.web.servlet.LoginServlet类
            6.login.html中form表单的action路径的写法
                * 虚拟目录+Servlet的资源路径

            7.BeanUtils工具类，简化数据的封装
                * 用于封装JavaBean的
                1.JavaBean:标准的Java类
                - 要求
                    1.类必须被public修饰
                    2.必须提供空参的构造方法
                    3.成员变量必须使用private修饰
                    4.提供公共setter和getter方法

                - 功能：封装数据

                2.概念：
                    成员变量：
                    属性：setter和getter方法截取后的产物
                        例如：getUsername() --> Username --> username(属性)


                3.方法：
                    1.setProperty()
                    2.getProperty()
                    3.populate(object obj,Map map):将map集合的键值对信息，封装到对应的
                    JavaBean对象中





#！注意 WEB-INF 和它下面的 lib 目录一定不能写错，不然就会500错误





        一般一次请求响应的步骤
            1.tomcat服务器会根据请求url中的资源路径，创建对应的ServletDemo1的对象
            2.tomcat服务器，会创建request和response对象，request对象中封装请求消息数据
            3.tomcat将request和response两个对象传递给service方法，并且调用service方法
            4.程序猿可以通过request对象获取请求消息数据，通过response对象设置响应消息
            5.服务器在给浏览器响应之前，会从response对象中拿程序猿设置的响应消息数据



-------------------------------------------------------------------------------------

#HTTP协议：响应消息
#Response对象
#ServletContext对象



##HTTP协议：
    1.请求消息：客户端发送给服务器端的数据
        * 数据格式
            1.请求行
            2.请求头
            3.请求空行
            4.请求体

    2.响应消息：服务器端发送给客户端的数据
        * 数据格式
            1.响应行
                1.组成：协议/版本 响应状态码 状态码描述
                2.响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态
                    * 状态码都是3位数字
                    * 分类：
                        1.1XX：服务器接受客户端消息，但没有接收完成，等待一段时间后，发送1XX多状态码

                        2.2XX：成功。代表数字：200

                        3.3XX：重定向。代表数字：302(重定向)，304(访问缓存)

                        4.4XX：客户端错误。
                            - 代表数字:
                                404(请求路径没有对应资源)
                                405(请求方式没有对应的doXxx方法)

                        5.5XX：服务器端错误
                            - 代表数字：
                                500(服务器内部出现异常)



            2.响应头
                1.格式：头名称：值
                2.常见的响应头：
                    1.Content-Type:服务器告诉客户端本次响应体数据格式以及编码格式
                    2.Content-disposition:服务器告诉客户端什么格式打开响应体数据
                        * 值：
                            * in-line:默认值，在当前页面内打开
                            * attachment:以附件形式打开响应体。文件下载



            3.响应空行
            4.响应体：传输的数据



    * 响应字符串格式
        HTTP/1.1 200 OK
        Date: Sun, 17 May 2020 10:48:00 GMT
        Content-Type: text/html
        Transfer-Encoding: chunked
        Connection: keep-alive
        Cache-Control: public, max-age=600, must-revalidate
        Content-Encoding: gzip



##Response对象
    * 功能：设置响应消息
        1.设置响应行
            1.格式 HTTP/1.1 200 ok
            2.设置状态码：setStatus(int sc)

        2.设置响应头
            setHeader(String name,String value)

        3.设置响应体:
            * 使用步骤
                1.获取输出流
                    * 字符输出流：
                        PrintWriter getWriter()

                    * 字节输出流
                        ServletOutputStream getOutputStream()

                2.使用输出流，将数据输出到客户端浏览器

    * 案例：
        1.完成重定向
            * 重定向：资源跳转的一种方式
            * 代码实现：
            //1.设置状态码位302
            response.setStatus(302);
            //2.设置响应头location
            response.setHeader("location","/Zujie_war_exploded/Response2");

            //简单的重定向方法
            response.sendRedirect("/Zujie_war_exploded/Response2");


        * 重定向的特点：redirct
            1.地址栏发生变化
            2.重定向可以访问其他站点(服务器)的资源
            3.重定向是两次请求，不能使用request对象来共享数据了


        * 转发的特点：forward
            1.转发地址栏路径不变
            2.转发只能访问当前服务器下的资源
            3.转发是一次请求，可以使用request对象来共享数据



        * 路径写法：
            1.路径分类
                1.相对路径：通过相对路径不可以确定唯一的资源
                    如：./index.html
                    不以/开头，以.开头

                规则：确定访问当前资源和目标资源之间的相对位置关系
                    * ./:当前目录
                    * ../：后退一级目录


                2.绝对路径：通过绝对路径可以确定唯一资源
                    如：https://www.bilibili.com/video/BV1J4411877m?p=265
                    以/开头的路径

                规则：判断定义的路径是给谁用的？从哪发送就是给谁用
                    * 给客户端浏览器用的：需要加虚拟目录(项目的访问路径)
                        * 建议虚拟目录动态获取：request.getContextPath()
                        <a> <form> 重定向...

                    * 给服务器使用：不需要加虚拟目录
                        * 转发路径



        2.服务器输出字符数据到浏览器
            * 步骤：
                1.获取字符输出流
                2.输出数据

            * 注意乱码问题：
                1.PrintWriter pw = response.getWriter(); 获取的流的默认编码为ISO-8859-1
                2.设置该流的默认编码
                3.告诉浏览器响应体使用的编码

                //简单的形式，设置编码，是在获取流对象之前设置
                response.setContentType("text/html;charset=utf-8");



        3.服务器输出字节数据到浏览器
            * 步骤：
                1.获取字节输出流
                2.输出数据


        4.验证码
            1.本质图片
            2.目的：防止恶意注册


## ServletContext对象
    1.概念：代表整个web应用，可以和程序的容器(服务器)来通信

    2.获取：
        通过requesst对象获取
            request.getServletContext()

        通过HttpServlet获取
            this.getServletContext()

    2.功能：
        1.获取MIME类型：
            * MIME类型：在互联网通信过程中定义的一种文件数据类型
                * 格式：大类型/小类型  text/html

            * 获取：String getMimeType(String file)


        2.域对象：共享数据的
            1.setAttribute(String name,Object value)
            2.getAttribute(String name)
            3.removeAttribute(String name)

            * ServletContext对象范围：所有用户所有请求的数据


        3.获取文件的真实(服务器路径)路径
            1.方法：String getRealPath(String path)


-------------------------------------------------------------------------------
#案例:
    * 文件下载需求：
        1.页面显示超链接
        2.点击超链接后弹出下载提示框
        3.完成图片文件下载


    * 分析：
        1.超链接指向的资源如果能够被浏览器解析，则在浏览器中显示，如果不能解析，则
        弹出下载提示框(不满足需求)
        2.我们要求任何资源都必须弹出下载提示框
        3.使用响应头设置资源的打开方式：
            * content-disposition:attachment;filename-xxx


    * 步骤：
        1.定义页面，编辑超链接href属性，指向Servlet，传递资源的参数
        2.定义Servlet
            1.获取文件名称
            2.使用字节输入流加载文件进内存
            3.指定response的响应头： content-disposition:attachment;filename-xxx
            4.将数据写出到response输出流


        问题：
            * 中文文件问题
                * 解决思路：
                    1.获取客户端使用的浏览器版本信息
                    2.根据不同的版本信息，设置filename的编码

-------------------------------------------------------------------------------

#会话技术
    1.Cookie
    2.Engulf.Session

#JSP：入门学习



##会话技术：
    1.会话：一次会话中包含多次请求和响应
        * 一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止
    2.功能：在一次会话范围内的多次请求间，共享数据
    3.方式：
        1.客户端会话技术：Cookie
        2.服务器端会话技术：Engulf.Session


## Cookie：
    1.概念：客户端会话技术，将数据保存到客户端

    2.快速入门：
        * 使用步骤：
            1.创建Cookie对象，绑定数据
                * new Cookie(String name,String value)

            2.发送Cookie对象
                * response.addCookie(Cookie cookie)

            3.获取Cookie，拿到数据
                * Cookie[] request.getCookies()

    3.实现原理
        * 基于响应头set-cookie和请求头cookie实现

    4.cookie的细节
        1.一次可不可以发送多个cookie?
            * 可以
            * 可以创建多个Cookie对象，使用response调用多次addCookie方法发送Cookie


        2.cookie在浏览器中保存多长时间？
            1.默认情况下，当浏览器关闭后，Cookie数据被销毁
            2.持久化存储：
                * setMaxAge(int seconds)
                    1.正数：将Cookie数据写入到硬盘文件中。持久化存储。seconds为cookie存活时间
                    2.负数：默认值
                    3.零：删除cookie信息


        3.cookie能不能存中文？
            在tomcat 8 之前 cookie中不能直接存储中文数据
                * 需要将中文转码 -- 一般采用URL编码

        4.cookie共享问题？
            1. 假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie
            能不能共享
                * 默认情况下cookie不能共享

                * setPath(String path):设置cookie的获取范围，默认情况下，设置当前的虚拟
                目录
                * 如果要共享，则可以将path设置为/


            2.不同tomcat服务器间cookie共享问题？
                * setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie
                可以共享
                    * setDomain(".baidu.com"),那么tieba.baidu.com和news.baidu.com中
                    cookie可以共享


    5.Cookie的特点和作用
        1.cookie存储数据在客户端浏览器
        2.浏览器对于当个cookie的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制的

        * 作用：
            1.cookie一般用于存储少量的不太敏感不重要的数据
            2.在不登陆的情况下，完成服务器对客户端的身份识别



    6.案例：记住上一次访问时间
        - 需求：
            1.访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问
            2.如果不是第一次访问，则提示：欢迎回来，您上次访问时间为：显示时间字符串


-----------------------------------------------------------------------------------------

## JSP：入门学习
    1.概念：
        Java Server Pages:java服务器端页面
            * 可以理解为：一个特殊的页面，其中既可以直接定义html标签，又可以定义java代码
            * 用于简化书写


    2.原理
        * JSP本质上就是一个Servlet

    3.JSP的脚本：JSP声明Java代码的方式
        1.<% %>：定义的java代码，在service方法里面，service方法中可以定义什么，该脚本就可以
        定义什么

        2.<%! %>：定义的java代码，在jsp转换后的java类的成员位置

        3.<%= %>：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本就可以定义什么
        定义在service方法中


    4.JSP内置对象：
        * 在JSP页面中不需要获取和创建可以直接使用的对象
        * jsp一共有9个内置对象
        重点的3个：
            - request
            - response
            - out：字符输出流对象，可以将数据输出到页面上。和response.getWrite()类似
                * response.getWrite() 和 out.write() 的区别：
                    * 在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out
                    缓冲区数据
                    * response.getWriter()数据输出永远在out.write()之前




## Engulf.Session:
    1.概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession
    2.快速入门：
        HttpSession对象：
            Object getAttribute(String name)
            void setAttribute(String name,Object value)
            void removeAttribute(String name)


    3.原理
        * Session的实现是依赖于Cookie的
        JSESSIONID=484C90F0FE22F0225E4…a-eeec-41c3-ba9b-9cf15fbb61cb
        JSESSIONID=484C90F0FE22F0225E4…a-eeec-41c3-ba9b-9cf15fbb61cb


    4.细节：
        1.当客户端关闭后，服务器不关闭，两次获取的session是同一个吗？
            * 默认情况下，不是
            * 如果需要相同，则可以创建Cookie，键为JSESSIONID,设置最大存活时间，让cookie持久化保存
                    Cookie c = new Cookie("JSESSIONID",hs.getId());
                    c.setMaxAge(60 * 60);
                    response.addCookie(c);


        2.客户端不关闭，服务器关闭后，两次获取的session是同一个吗？
            * 不是同一个，但是要确保数据不丢失
                org.apache.catalina.session.StandardSessionFacade@20624d3e
                重启服务器后
                org.apache.catalina.session.StandardSessionFacade@336b409

                * session的钝化：
                    * 在服务器正常关闭之前，将session对象序列化到硬盘上
                * session的活化：
                    * 在服务器启动后，将session文件转化为内存中的session对象即可


        3.session的失效时间，什么时候被销毁？
            1.服务器关闭
            2.session对象调用invalidate()
            3.默认失效时间30分钟
                可以选择性配置修改
                <session-config>
                    <session-timeout>30</session-timeout>
                </session-config>


        4.session的特点
            1.session用于存储一次会话的多次请求的数据，存在服务器端
            2.session可以存储任意类型，任意大小的数据

            * session 和 Cookie 的区别
                1.session存储数据在服务器端，Cookie在客户端
                2.session没有数据大小限制，Cookie有
                3.session数据相对安全，Cookie相对不安全



    案例：验证码
        1.案例需求：
            1.访问带有验证码的登陆页面login.jsp
            2.用户输入用户名，密码以及验证码
                * 如果用户名或密码输入有误，跳转登陆页面，提示用户名或密码错误
                * 如果验证码输入有误，跳转登录页面，提示验证码错误
                * 如果全部输入正确，则跳转到主页success.jsp 显示：用户名，欢迎您


        2.分析：
            LoginServlet：
            1.设置request的编码
            2.获取参数Map集合
            3.获取验证码
            4.将用户信息封装到User对象
            5.判断程序生成的验证码和用户输入是否一致(从session中获取程序生成的验证码)
                * 一致：
                    再判断用户名密码是否正确
                        * 正确：
                            - 登陆成功
                            - 存储数据
                            - 跳转success.jsp 重定向


                        * 不正确：
                            - 给提示信息
                            - 跳转登录页面


                * 不一致：
                    - 给用户提示信息：验证码错误(request)
                    - 跳转登录页面(转发)

------------------------------------------------------------------------------------

#1.JSP（全称JavaServer Pages）
    1.指令
        * 作用：用于配置JSP页面，导入资源文件
        * 格式：
            <%@ 指令名称 属性名1=属性值1 属性名2=属性值2 ... %>
        * 分类：
            1.page：配置JSP页面的
                * contentType ：等同于response.setContentType()
                    1.设置响应体的mime类型，以及字符集
                    2.设置当前页面的编码(只能是高级的IDE才有效，如果使用低级工具，则需要设置
                    pageEncoding属性设置当前页面的字符集)
                * import：导包
                * errorPage：当前页面发生异常后，会自动跳转到指定的错误页面
                * isErrorPage：标识当前页面是否是错误页面
                    - true:是，可以使用内置对象exception
                    - false：否。默认值，不可以使用exception内置对象


            2.include：页面包含的。导入页面的资源文件
                * <%@ include file="top.jsp"%>


            3.taglib：导入资源
                * <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
                    * prefix:前缀，自定义的


    2.注释
        1.html注释：
            <!-- -->  注释html代码片段
        2.jsp注释；
            <%-- --%>  可以注释所有的


    3.内置对象
        * 在JSP页面中不需要创建，直接使用的对象
                变量名                     真实类型                       作用
            - pageContext                  PageContext                   当前页面共享数据，还可以获取其他8个内置对象
            - request                      HttpServletRequest            一次请求访问的多个资源(转发)
            - session                      HttpSession                   一次会话的多个请求键
            - application                  ServletContext                所有用户间共享数据
            - response                     HttpServletResponse           响应对象
            - page                         Object                        当前页面(Servlet)的对象 this
            - out                          JspWriter                     输出对象，数据输出到页面上
            - config                       ServletConfig                 Servlet的配置对象
            - exception                    Throwable                     异常对象




#2.MVC开发模式
## jsp演变历史
    1.早期只有servlet，只能使用response输出标签数据，非常麻烦
    2.后来有jsp，简化了Servlet的开发，但过度使用jsp，在jsp中写大量的java代码，又有大量的html，造成难于维护，难于分工协作
    3.再后来，java的web开发，借鉴mvc开发模式，使得程序的设计更加合理性


## MVC:
    1.M：Model，模型(业务逻辑操作) JavaBean
        * 完成具体的业务操作，如查询数据库，封装对象

    2.V：View，视图(展示数据) JSP
        * 展示数据

    3.C：Controller，控制器  Servlet
        1.获取客户端的输入
        2.调用模型
        3.将数据交给视图层展示


    * 优缺点：
        - 优点：
            1.耦合性低，方便维护，便于分工合作
            2.重用性高
            3.便于维护

        - 缺点：
            使得项目的架构变得复杂，对开发人员要求高很多





#3.EL表达式
    1.概念：Expression Language 表达式语言
    2.作用：替换和简化jsp页面中java代码的编写
    3.语法：${表达式}
    4.注意：jsp默认支持EL表达式.
        如果想忽略EL表达式
        1.设置jsp中page指令中：isELIgnored = "true" 忽略当前jsp中所有的EL表达式
        2.\${表达式} ： 忽略当前这个el表达式

    5.使用：
        1.运算：
            * 运算符：
                1.算术运算符： + - * /(div) %(mod)
                2.比较运算符：> < >= <= == !=
                3.逻辑运算符：&&(and) ||(or) !(not)
                4.空运算符：empty
                    * 功能：用于判断字符串，集合，数组对象是否为null并且长度是否为0
                    * &{empty list} ：判断list键对应的值是否为空 或者 长度为0
                    * ${not empty str} : 表示判断字符串，集合，数组对象不为null 并且 长度>0

        2.获取值：
            1.el表达式只能从域对象中获取值
            2.语法：
                1. ${域名称.键名}：从指定域中获取指定键的值
                    * 域名称：
                        1.pageScope         --> pageContext
                        2.requestScope      --> request
                        3.sessionScope      --> session
                        4.applicationScope  --> application(ServletContext)

                    * 举例：在request域中存储了name-Gnar
                    * 获取：${requestScope.name}


                2.${键名}:表示依次从最小的域查找是否有该键对应的值，直到找到为止
                    ${name}


            3.获取对象，List集合，Map集合的值
                1.对象：${域名称.键名称.属性名称}
                    本质上回去调用getter方法

                2.List集合:${域名称.键名[索引]}

                3.Map集合:${域名称.键名.key名称} or ${域名称.键名[key名称(字符串)]}


        3.隐式对象：
            * EL表达式中有11个隐式对象
            * pageContext：
                1.获取jsp其他8个对象
                ${pageContext.request.contextPath} : 动态获取虚拟目录



#4.JSTL标签
    1.概念：JavaServer Pages Tag Library   JSP标准标签库
    2.作用：用于简化和替换jsp页面上的java代码   <标签>
    3.使用步骤
        1.导入jstl相关jar包
        2.引入标签库：taglib指令 <%@ taglib %>
        3.使用标签
    4.常用的JSTL标签
        1.if        ：相当于java代码的if语句
        2.choose    ：相当于java代码的switch语句
        3.foreach   ：当当于java代码的for语句
                    for的功能：
                    1.完成重复的操作
                        for(int i = 0;i < 10;i++){
                        }
                        * 属性:
                            begin:开始值
                            end：结束值
                            var：临时变量
                            step：步长
                            varStatus:循环状态对象
                                index:
                                count:循环次数


                    2.遍历容器
                        List<User> list;
                        for(User u:list){
                        }

                        * 属性：
                            items:容器对象
                            var：容器中的临时对象



    5.练习：
        * 需求：在request域中有一个存有User对象的List集合，使用jstl+el将list集合数据展示
        到jsp页面的表格table中






#5.三层架构
    1.界面层(表示层):用户看到的界面.用户可以通过页面上的组件和服务器进行交互
    2.业务逻辑层：处理业务逻辑的.
    3.数据访问层：操作数据存储文件的



## 案例：用户信息列表展示
    1.需求：用户信息的增删改查操作
    2.设计：
        1.技术选型：servlet+JSP+MySQL+JDBCTemplate+Druid+BeanUtils+tomcat
        2.数据库设计：
            create database User_info;
            use User_info;
            create table user{
                id int primary key auto_increment,
                name varchar(20) not null,
                gender varchar(5),
                age int,
                address varchar(30),
                qq varchar(20),
                email varchar(40)
            };

    3.开发：
        1.环境搭建
            1.创建数据库环境
            2.创建项目，导入需要的jar包

        2.编码

    4.测试
    5.部署运维